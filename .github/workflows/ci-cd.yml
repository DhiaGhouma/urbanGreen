name: CI/CD Pipeline

on:
  push:
    branches: [main moetaz]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Build and Test Laravel Application
  laravel-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better SonarCloud analysis

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Generate key
        run: php artisan key:generate

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run Migrations
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan migrate --force

      - name: Execute tests (Unit and Feature tests) with coverage
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            coverage-html/
          retention-days: 5

      - name: Display coverage summary
        run: |
          echo "‚úÖ Tests completed successfully!"
          if [ -f coverage.xml ]; then
            echo "üìä Coverage report generated"
          fi

  # Job 2: Build Frontend Assets
  frontend-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: public/build/
          retention-days: 5

      - name: Build success
        run: echo "‚úÖ Frontend assets built successfully!"

  # Job 3: Code Quality Check (Local)
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: [laravel-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: phpcs, phpstan

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Display Coverage Summary
        run: |
          echo "üìä Code Coverage Report"
          echo "======================="
          if [ -f coverage.xml ]; then
            echo "‚úÖ Coverage report generated successfully"
            # You can add coverage parsing here if needed
          fi
          echo "======================="

      - name: Check PHP Code Style (Laravel Pint)
        run: |
          composer require laravel/pint --dev --no-interaction || true
          if [ -f vendor/bin/pint ]; then
            vendor/bin/pint --test || echo "‚ö†Ô∏è Code style issues found (non-blocking)"
          fi
        continue-on-error: true

      - name: Quality Check Complete
        run: |
          echo "‚úÖ Code quality checks completed"
          echo "üìù Note: For advanced quality analysis, ask repo owner to setup SonarCloud"

  # Job 4: Build and Push Docker Image (only on main/moetaz branches)
  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [laravel-tests, frontend-build, code-quality]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/moetaz')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: public/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/urbangreen
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/urbangreen:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/urbangreen:buildcache,mode=max

      - name: Docker Image Summary
        run: |
          echo "üê≥ Docker Image pushed successfully!"
          echo "üì¶ Tags: ${{ steps.meta.outputs.tags }}"
          echo "üîó Pull command: docker pull ${{ secrets.DOCKER_USERNAME }}/urbangreen:latest"

  # Job 5: Deployment Notification
  notify:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [laravel-tests, frontend-build, code-quality, docker]
    if: always()

    steps:
      - name: Pipeline Status
        run: |
          echo "================================================"
          echo "üéâ CI/CD Pipeline Execution Complete!"
          echo "================================================"
          echo "‚úÖ Laravel Tests: ${{ needs.laravel-tests.result }}"
          echo "‚úÖ Frontend Build: ${{ needs.frontend-build.result }}"
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Docker Build: ${{ needs.docker.result }}"
          echo "================================================"
